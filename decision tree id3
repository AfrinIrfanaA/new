import pandas as pd
import numpy as np

def entropy(col):
    _, counts = np.unique(col, return_counts=True)
    return -np.sum((counts / counts.sum()) * np.log2(counts / counts.sum()))

def info_gain(data, attr, target="PlayTennis"):
    total_entropy = entropy(data[target])
    vals, counts = np.unique(data[attr], return_counts=True)
    weighted_entropy = np.sum([ (counts[i] / counts.sum()) * entropy(data[data[attr] == v][target]) for i, v in enumerate(vals)])
    return total_entropy - weighted_entropy

def id3(data, features, target="PlayTennis", parent_class=None):
    unique_targets = np.unique(data[target])
    if len(unique_targets) == 1:
        return unique_targets[0]
    elif data.empty or len(features) == 0:
        return parent_class
    parent_class = unique_targets[np.argmax(np.unique(data[target], return_counts=True)[1])]
    best_feature = features[np.argmax([info_gain(data, f, target) for f in features])]
    tree = {best_feature: {}}
    features = [f for f in features if f != best_feature]
    for v in np.unique(data[best_feature]):
        subtree = id3(data[data[best_feature] == v], features, target, parent_class)
        tree[best_feature][v] = subtree
    return tree

# Example usage:
if __name__ == "__main__":
    data = {
        'Outlook': ['Sunny', 'Sunny', 'Overcast', 'Rain', 'Rain', 'Rain', 'Overcast', 'Sunny', 'Sunny', 'Rain', 'Sunny', 'Overcast', 'Overcast', 'Rain'],
        'Temperature': ['Hot', 'Hot', 'Hot', 'Mild', 'Cool', 'Cool', 'Cool', 'Mild', 'Cool', 'Mild', 'Mild', 'Mild', 'Hot', 'Mild'],
        'Humidity': ['High', 'High', 'High', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'Normal', 'Normal', 'High', 'Normal', 'High'],
        'Windy': ['False', 'True', 'False', 'False', 'False', 'True', 'True', 'False', 'False', 'False', 'True', 'True', 'False', 'True'],
        'PlayTennis': ['No', 'No', 'Yes', 'Yes', 'Yes', 'No', 'Yes', 'No', 'Yes', 'Yes', 'Yes', 'Yes', 'Yes', 'No']
    }
    df = pd.DataFrame(data)
    tree = id3(df, df.columns[:-1].tolist(), 'PlayTennis')
    print(tree)
